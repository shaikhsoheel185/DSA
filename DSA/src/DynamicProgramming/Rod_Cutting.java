package DynamicProgramming;

//        Rod Cutting Problem | (DP – 24)
//        Problem Statement:  Rod Cutting Problem
//
//        Problem Link: Rod Cutting Problem
//
//        We are given a rod of size ‘N’. It can be cut into pieces.
//        Each length of a piece has a particular price given by the price array.
//        Our task is to find the maximum revenue that can be generated by selling
//        the rod after cutting( if required) into pieces


public class Rod_Cutting {


    public static int fun(  int index ,int [] price , int n) {

        if ( index == 0) return ( n * price[0]);
//        int len = index+1;
        int NoTake = fun( index-1, price , n);
        int Take = Integer.MIN_VALUE;
        if ( index+1 <= n) {
            Take = price[index] + fun( index , price , n-(index+1));
        }
        return Math.max( Take , NoTake);

    }
    public static void main(String[] args) {
        int [] price = {5,6,1,4,2};
        int ans = fun( price.length-1 ,price , 5);
        System.out.println( ans);
    }
}
